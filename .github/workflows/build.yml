---
name: build

on:
  push:
  pull_request:
  repository_dispatch:
    types: [apb]

env:
  CURL_CACHE_DIR: ~/.cache/curl
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit
  RUN_TMATE: ${{ secrets.RUN_TMATE }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: cisagov/setup-env-github-action@develop
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Store installed Python version
        run: |
          echo "PY_VERSION="\
          "$(python -c "import platform;print(platform.python_version())")" \
          >> $GITHUB_ENV
      - uses: actions/setup-go@v2
        with:
          go-version: '1.15'
      - name: Lookup go cache directory
        run: echo "GOCACHE_DIR=$(go env GOCACHE)" >> $GITHUB_ENV
      - name: Cache linting environments
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.PIP_CACHE_DIR }}
            ${{ env.PRE_COMMIT_CACHE_DIR }}
            ${{ env.CURL_CACHE_DIR }}
            ${{ env.GOCACHE_DIR }}
          key: "lint-${{ runner.os }}-\
            py${{ env.PY_VERSION }}-\
            go${{ env.GO_VERSION }}-\
            tf${{ env.TERRAFORM_VERSION }}-\
            ${{ hashFiles('**/requirements-test.txt') }}-\
            ${{ hashFiles('**/requirements.txt') }}-\
            ${{ hashFiles('**/.pre-commit-config.yaml') }}"
          restore-keys: |
            lint-${{ runner.os }}-\
            py${{ env.PY_VERSION }}-\
            go${{ env.GO_VERSION }}-\
            tf${{ env.TERRAFORM_VERSION }}-
            lint-${{ runner.os }}-
      - name: Install Terraform
        run: |
          mkdir -p ${{ env.CURL_CACHE_DIR }}
          TERRAFORM_ZIP="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          curl --output ${{ env.CURL_CACHE_DIR }}/"${TERRAFORM_ZIP}" \
            --time-cond ${{ env.CURL_CACHE_DIR }}/"${TERRAFORM_ZIP}" \
            --location \
            "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TERRAFORM_ZIP}"
          sudo unzip -d /opt/terraform \
            ${{ env.CURL_CACHE_DIR }}/"${TERRAFORM_ZIP}"
          sudo ln -s /opt/terraform/terraform /usr/bin/terraform
          sudo mv /usr/local/bin/terraform /usr/local/bin/terraform-default
          sudo ln -s /opt/terraform/terraform /usr/local/bin/terraform
      - name: Install Terraform-docs
        run: GO111MODULE=on go get github.com/terraform-docs/terraform-docs
      - name: Find and initialize Terraform directories
        run: |
          for path in $(find . -not \( -type d -name ".terraform" -prune \) \
            -type f -iname "*.tf" -exec dirname "{}" \; | sort -u); do \
            echo "Initializing '$path'..."; \
            terraform init -input=false -backend=false "$path"; \
            done
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Set up pre-commit hook environments
        run: pre-commit install-hooks
      - name: Run pre-commit on all files
        run: pre-commit run --all-files
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v1
        if: env.RUN_TMATE
